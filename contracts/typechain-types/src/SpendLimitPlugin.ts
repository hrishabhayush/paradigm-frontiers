/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SpendLimitPlugin {
  export type ConfigStruct = {
    spendLimit: BigNumberish;
    relayerAddress: AddressLike;
    recoveryAddress: AddressLike;
  };

  export type ConfigStructOutput = [
    spendLimit: bigint,
    relayerAddress: string,
    recoveryAddress: string
  ] & { spendLimit: bigint; relayerAddress: string; recoveryAddress: string };
}

export interface SpendLimitPluginInterface extends Interface {
  getFunction(
    nameOrSignature: "config" | "executeWithProof" | "setConfig" | "verifyProof"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ProofVerified"): EventFragment;

  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeWithProof",
    values: [
      BytesLike,
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [SpendLimitPlugin.ConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      BigNumberish[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeWithProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;
}

export namespace ProofVerifiedEvent {
  export type InputTuple = [relayer: AddressLike];
  export type OutputTuple = [relayer: string];
  export interface OutputObject {
    relayer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SpendLimitPlugin extends BaseContract {
  connect(runner?: ContractRunner | null): SpendLimitPlugin;
  waitForDeployment(): Promise<this>;

  interface: SpendLimitPluginInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  config: TypedContractMethod<
    [],
    [
      [bigint, string, string] & {
        spendLimit: bigint;
        relayerAddress: string;
        recoveryAddress: string;
      }
    ],
    "view"
  >;

  executeWithProof: TypedContractMethod<
    [
      arg0: BytesLike,
      pA: [BigNumberish, BigNumberish],
      pB: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      pC: [BigNumberish, BigNumberish],
      publicInputs: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  setConfig: TypedContractMethod<
    [cfg: SpendLimitPlugin.ConfigStruct],
    [void],
    "nonpayable"
  >;

  verifyProof: TypedContractMethod<
    [
      _pA: [BigNumberish, BigNumberish],
      _pB: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _pC: [BigNumberish, BigNumberish],
      _pubSignals: BigNumberish[]
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "config"
  ): TypedContractMethod<
    [],
    [
      [bigint, string, string] & {
        spendLimit: bigint;
        relayerAddress: string;
        recoveryAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeWithProof"
  ): TypedContractMethod<
    [
      arg0: BytesLike,
      pA: [BigNumberish, BigNumberish],
      pB: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      pC: [BigNumberish, BigNumberish],
      publicInputs: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setConfig"
  ): TypedContractMethod<
    [cfg: SpendLimitPlugin.ConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyProof"
  ): TypedContractMethod<
    [
      _pA: [BigNumberish, BigNumberish],
      _pB: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _pC: [BigNumberish, BigNumberish],
      _pubSignals: BigNumberish[]
    ],
    [boolean],
    "view"
  >;

  getEvent(
    key: "ProofVerified"
  ): TypedContractEvent<
    ProofVerifiedEvent.InputTuple,
    ProofVerifiedEvent.OutputTuple,
    ProofVerifiedEvent.OutputObject
  >;

  filters: {
    "ProofVerified(address)": TypedContractEvent<
      ProofVerifiedEvent.InputTuple,
      ProofVerifiedEvent.OutputTuple,
      ProofVerifiedEvent.OutputObject
    >;
    ProofVerified: TypedContractEvent<
      ProofVerifiedEvent.InputTuple,
      ProofVerifiedEvent.OutputTuple,
      ProofVerifiedEvent.OutputObject
    >;
  };
}
